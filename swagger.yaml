swagger: "2.0"
info:
  {
    title: "Secure Attendance System API Docs",
    version: "1.0",
    description: "This was created as CMSE353 term project for EMU.",
  }
tags:
  - name: auth
    description: Routes related to authentication
  - name: courses
    description: Routes related to courses operations

paths:
  /auth/studentSignup:
    post:
      tags:
        - auth
      summary: Add student to database
      parameters:
        - name: body
          in: body
          description: Student data
          required: true
          schema:
            type: object
            description: CreateUserDto
            required:
              - email
              - password
              - fullName
            properties:
              email:
                type: string
              password:
                type: string
              fullName:
                type: string
              department:
                type: string
                default: "Software Engineering"
      responses:
        201:
          description: "Created"
        400:
          description: "Bad Request"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  /auth/parentSignup:
    post:
      tags:
        - auth
      summary: "Add parent to database"
      parameters:
        - name: body
          in: body
          description: parent data
          required: true
          schema:
            type: object
            description: CreateUserDto
            required:
              - email
              - password
              - fullName
            properties:
              email:
                type: string
              password:
                type: string
              fullName:
                type: string
      responses:
        201:
          description: "Created"
        400:
          description: "Bad Request"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  /auth/teacherSignup:
    post:
      tags:
        - auth
      summary: "Add teacher to database"
      parameters:
        - name: body
          in: body
          description: teacher data
          required: true
          schema:
            type: object
            description: CreateUserDto
            required:
              - email
              - password
              - fullName
            properties:
              email:
                type: string
              password:
                type: string
              fullName:
                type: string
      responses:
        201:
          description: "Created"
        400:
          description: "Bad Request"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  /auth/chairSignup:
    post:
      tags:
        - auth
      summary: "Add chair to database"
      parameters:
        - name: body
          in: body
          description: chair data
          required: true
          schema:
            type: object
            description: CreateUserDto
            required:
              - email
              - password
              - fullName
              - department
            properties:
              email:
                type: string
              password:
                type: string
              fullName:
                type: string
              department:
                type: string
      responses:
        201:
          description: "Created"
        400:
          description: "Bad Request"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  /auth/login:
    post:
      tags:
        - auth
      summary: Login
      parameters:
        - name: body
          in: body
          description: user data
          required: true
          schema:
            type: object
            description: LoginUserDto
            required:
              - email
              - password
            properties:
              email:
                type: string
              password:
                type: string
      responses:
        200:
          description: "Success"
        400:
          description: "Bad Request"
        409:
          description: "Conflict"
        500:
          description: "Server Error"

  /auth/logout:
    post:
      tags:
        - auth
      summary: Logout
      responses:
        200:
          description: "Success"
        400:
          description: "Bad Request"
        409:
          description: "Conflict"
        500:
          description: "Server Error"
  
  /courses:
    get:
      tags:
        - courses
      summary: Get all courses
      description: Returns all courses saved in database
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema: 
            type: object
            properties: 
              data:
                type: array
                items:
                  type: object
                  properties: 
                    id:
                      type: string
                      description: The course id
                    name:
                      type: string
                      description: The course name(usually includes group number)
                    teacherId:
                      type: string
                      description: The id of the teacher teaching this course
              message:
                type: string
  
  /courses/create:
    post:
      tags:
        - courses
      summary: Create course
      description: Add a new course to database
      parameters:
        - name: body
          in: body
          description: Course data
          required: true
          schema:
            type: object
            description: CreateCourseDto
            required:
              - name
              - teacherId
            properties:
              name:
                type: string
                description: The name of the course
              teacherId:
                type: string
                description: The name of the teacher teaching this course
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema: 
            type: object
            properties: 
              data:
                type: object
                properties: 
                  id:
                    type: string
                    description: The course id
                  name:
                    type: string
                    description: The course name(usually includes group number)
                  teacherId:
                    type: string
                    description: The id of the teacher teaching this course
              message:
                type: string
                default: Created course successfully!

  /courses/addStudentToCourse:
    post:
      tags:
        - courses
      summary: Add student to course
      description: Add the student to the specified course
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            description: AddStudentToCourseDto
            required:
              - studentId
              - courseId
            properties:
              studentId:
                type: string
                description: The id of the student to be added to the course
              courseId:
                type: string
                description: The id of the course the student is to be added to
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema: 
            type: object
            properties: 
              data:
                type: object
                properties: 
                  id:
                    type: string
                    description: The course id
                  name:
                    type: string
                    description: The course name(usually includes group number)
                  teacherId:
                    type: string
                    description: The id of the teacher teaching this course
              message:
                type: string
                default: Added student successfully!

  /courses/removeStudentFromCourse:
    post:
      tags:
        - courses
      summary: Remove student from course
      description: Remove the student from the specified course, this will delete the attendance records related to it as well.
      parameters:
        - name: body
          in: body
          required: true
          schema:
            type: object
            description: AddStudentToCourseDto
            required:
              - studentId
              - courseId
            properties:
              studentId:
                type: string
                description: The id of the student to be removed from the course
              courseId:
                type: string
                description: The id of the course the student is to be removed from
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema: 
            type: object
            properties: 
              message:
                type: string
                default: Removed student successfully!



# definitions
definitions:
  UserRole:
    type: string
    description: |
      This is mainly to keep the strings consistent and less prone to errors. Should be used wherever role String is required.
    enum:
      - STUDENT
      - PARENT
      - TEACHER
      - CHAIR
      - SYSTEM_ADMINISTRATOR

  Department:
    type: string
    description: |
      This is mainly to keep the strings consistent and less prone to errors. Should be used wherever department String is required.
    enum:
      - COMPUTER_ENGINEERING
      - SOFTWARE_ENGINEERING
      - MECHANICAL_ENGINEERING
      - CIVIL_ENGINEERING

  User:
    type: object
    description: This model represents each and every user in our system, it is required for authentication system.
    required:
      - email
      - password
      - role
    properties:
      id:
        type: number
        description: Autogenerated
      email:
        type: string
        description: User's email
      password:
        type: string
        description: User's plain text password, will be encrypted in the database.
      role:
        type: string
        $ref: "#/definitions/UserRole"
      student:
        type: object
        $ref: "#/definitions/Student"
      parent:
        type: object
        $ref: "#/definitions/Parent"

  Student:
    type: object
    required:
      - fullName
      - userId
    properties:
      id:
        type: number
        description: Autogenerated
      fullName:
        type: string
        description: The student's full name

      user:
        type: object
        $ref: "#/definitions/User"
      userId:
        type: number
        description: The id of the user related to this student
      parent:
        type: object
        $ref: "#/definitions/Parent"
      courses:
        type: array
        items:
          $ref: "#/definitions/CourseGroup"

  Parent:
    type: object
    required:
      - fullName
      - userId
    properties:
      id:
        type: number
        description: Autogenerated
      fullName:
        type: string
        description: The parent's full name

      user:
        type: object
        $ref: "#/definitions/User"
      userId:
        type: number
        description: The id of the user related to this parent
      children:
        type: array
        items:
          $ref: "#/definitions/Student"
  Teacher:
    type: object
    required:
      - fullName
      - userId
    properties:
      id:
        type: number
        description: Autogenerated
      fullName:
        type: string
        description: The teacher's full name

      user:
        type: object
        $ref: "#/definitions/User"
      userId:
        type: number
        description: The id of the user related to this teacher
      courseGroups:
        type: array
        items:
          $ref: "#/definitions/CourseGroup"

  CourseGroup:
    type: object
    description: This model represents each and every coure-group our system contains.
    required:
      - name
    properties:
      id:
        type: number
        description: Autogenerated
      name:
        type: string
        description: |
          The course name, usually contains the group number aswell. example: CMSE353(01)
      teacher:
        type: object
        $ref: "#/definitions/Teacher"
      teacherId:
        type: number
        description: The id of the teacher related to this coursegroup
      students:
        type: array
        items:
          $ref: "#/definitions/Student"
